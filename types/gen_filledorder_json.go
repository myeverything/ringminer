// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"
)

var _ = (*filledOrderMarshaling)(nil)

func (f FilledOrder) MarshalJSON() ([]byte, error) {
	type FilledOrder struct {
		OrderState       OrderState   `json:"orderState" gencodec:"required"`
		FeeSelection     int          `json:"feeSelection"`
		RateAmountS      *Big         `json:"rateAmountS"`
		AvailableAmountS *Big         `json:"availableAmountS"`
		FillAmountS      *EnlargedInt `json:"fillAmountS"`
		FillAmountB      *EnlargedInt `json:"fillAmountB"`
		LrcReward        *EnlargedInt `json:"lrcReward"`
		LrcFee           *EnlargedInt `json:"lrcFee"`
		FeeS             *EnlargedInt `json:"feeS"`
		LegalFee         *EnlargedInt `json:"legalFee"`
		EnlargedSPrice   *EnlargedInt `json:"enlargedSPrice"`
		EnlargedBPrice   *EnlargedInt `json:"enlargedBPrice"`
	}
	var enc FilledOrder
	enc.OrderState = f.OrderState
	enc.FeeSelection = f.FeeSelection
	enc.RateAmountS = (*Big)(f.RateAmountS)
	enc.AvailableAmountS = (*Big)(f.AvailableAmountS)
	enc.FillAmountS = f.FillAmountS
	enc.FillAmountB = f.FillAmountB
	enc.LrcReward = f.LrcReward
	enc.LrcFee = f.LrcFee
	enc.FeeS = f.FeeS
	enc.LegalFee = f.LegalFee
	enc.EnlargedSPrice = f.EnlargedSPrice
	enc.EnlargedBPrice = f.EnlargedBPrice
	return json.Marshal(&enc)
}

func (f *FilledOrder) UnmarshalJSON(input []byte) error {
	type FilledOrder struct {
		OrderState       *OrderState  `json:"orderState" gencodec:"required"`
		FeeSelection     *int         `json:"feeSelection"`
		RateAmountS      *Big         `json:"rateAmountS"`
		AvailableAmountS *Big         `json:"availableAmountS"`
		FillAmountS      *EnlargedInt `json:"fillAmountS"`
		FillAmountB      *EnlargedInt `json:"fillAmountB"`
		LrcReward        *EnlargedInt `json:"lrcReward"`
		LrcFee           *EnlargedInt `json:"lrcFee"`
		FeeS             *EnlargedInt `json:"feeS"`
		LegalFee         *EnlargedInt `json:"legalFee"`
		EnlargedSPrice   *EnlargedInt `json:"enlargedSPrice"`
		EnlargedBPrice   *EnlargedInt `json:"enlargedBPrice"`
	}
	var dec FilledOrder
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.OrderState == nil {
		return errors.New("missing required field 'orderState' for FilledOrder")
	}
	f.OrderState = *dec.OrderState
	if dec.FeeSelection != nil {
		f.FeeSelection = *dec.FeeSelection
	}
	if dec.RateAmountS != nil {
		f.RateAmountS = (*big.Int)(dec.RateAmountS)
	}
	if dec.AvailableAmountS != nil {
		f.AvailableAmountS = (*big.Int)(dec.AvailableAmountS)
	}
	if dec.FillAmountS != nil {
		f.FillAmountS = dec.FillAmountS
	}
	if dec.FillAmountB != nil {
		f.FillAmountB = dec.FillAmountB
	}
	if dec.LrcReward != nil {
		f.LrcReward = dec.LrcReward
	}
	if dec.LrcFee != nil {
		f.LrcFee = dec.LrcFee
	}
	if dec.FeeS != nil {
		f.FeeS = dec.FeeS
	}
	if dec.LegalFee != nil {
		f.LegalFee = dec.LegalFee
	}
	if dec.EnlargedSPrice != nil {
		f.EnlargedSPrice = dec.EnlargedSPrice
	}
	if dec.EnlargedBPrice != nil {
		f.EnlargedBPrice = dec.EnlargedBPrice
	}
	return nil
}
