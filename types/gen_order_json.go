// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"
)

var _ = (*orderMarshaling)(nil)

func (o Order) MarshalJSON() ([]byte, error) {
	type Order struct {
		Protocol              Address `json:"protocol" gencodec:"required"`
		TokenS                Address `json:"tokenS" gencodec:"required"`
		TokenB                Address `json:"tokenB" gencodec:"required"`
		AmountS               *Big    `json:"amountS" gencodec:"required"`
		AmountB               *Big    `json:"amountB" gencodec:"required"`
		Expiration            *Big    `json:"expiration" gencodec:"required"`
		Rand                  *Big    `json:"rand" gencodec:"required"`
		LrcFee                *Big    `json:"lrcFee" `
		BuyNoMoreThanAmountB  bool    `json:"buyNoMoreThanAmountB" gencodec:"required"`
		SavingSharePercentage int     `json:"savingSharePercentage" gencodec:"required"`
		V                     uint8   `json:"v" gencodec:"required"`
		R                     *Big    `json:"r" gencodec:"required"`
		S                     *Big    `json:"s" gencodec:"required"`
	}
	var enc Order
	enc.Protocol = o.Protocol
	enc.TokenS = o.TokenS
	enc.TokenB = o.TokenB
	enc.AmountS = (*Big)(o.AmountS)
	enc.AmountB = (*Big)(o.AmountB)
	enc.Expiration = (*Big)(o.Expiration)
	enc.Rand = (*Big)(o.Rand)
	enc.LrcFee = (*Big)(o.LrcFee)
	enc.BuyNoMoreThanAmountB = o.BuyNoMoreThanAmountB
	enc.SavingSharePercentage = o.SavingSharePercentage
	enc.V = o.V
	enc.R = (*Big)(o.R)
	enc.S = (*Big)(o.S)
	return json.Marshal(&enc)
}

func (o *Order) UnmarshalJSON(input []byte) error {
	type Order struct {
		Protocol              *Address `json:"protocol" gencodec:"required"`
		TokenS                *Address `json:"tokenS" gencodec:"required"`
		TokenB                *Address `json:"tokenB" gencodec:"required"`
		AmountS               *Big     `json:"amountS" gencodec:"required"`
		AmountB               *Big     `json:"amountB" gencodec:"required"`
		Expiration            *Big     `json:"expiration" gencodec:"required"`
		Rand                  *Big     `json:"rand" gencodec:"required"`
		LrcFee                *Big     `json:"lrcFee" `
		BuyNoMoreThanAmountB  *bool    `json:"buyNoMoreThanAmountB" gencodec:"required"`
		SavingSharePercentage *int     `json:"savingSharePercentage" gencodec:"required"`
		V                     *uint8   `json:"v" gencodec:"required"`
		R                     *Big     `json:"r" gencodec:"required"`
		S                     *Big     `json:"s" gencodec:"required"`
	}
	var dec Order
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Protocol == nil {
		return errors.New("missing required field 'protocol' for Order")
	}
	o.Protocol = *dec.Protocol
	if dec.TokenS == nil {
		return errors.New("missing required field 'tokenS' for Order")
	}
	o.TokenS = *dec.TokenS
	if dec.TokenB == nil {
		return errors.New("missing required field 'tokenB' for Order")
	}
	o.TokenB = *dec.TokenB
	if dec.AmountS == nil {
		return errors.New("missing required field 'amountS' for Order")
	}
	o.AmountS = (*big.Int)(dec.AmountS)
	if dec.AmountB == nil {
		return errors.New("missing required field 'amountB' for Order")
	}
	o.AmountB = (*big.Int)(dec.AmountB)
	if dec.Expiration == nil {
		return errors.New("missing required field 'expiration' for Order")
	}
	o.Expiration = (*big.Int)(dec.Expiration)
	if dec.Rand == nil {
		return errors.New("missing required field 'rand' for Order")
	}
	o.Rand = (*big.Int)(dec.Rand)
	if dec.LrcFee != nil {
		o.LrcFee = (*big.Int)(dec.LrcFee)
	}
	if dec.BuyNoMoreThanAmountB == nil {
		return errors.New("missing required field 'buyNoMoreThanAmountB' for Order")
	}
	o.BuyNoMoreThanAmountB = *dec.BuyNoMoreThanAmountB
	if dec.SavingSharePercentage == nil {
		return errors.New("missing required field 'savingSharePercentage' for Order")
	}
	o.SavingSharePercentage = *dec.SavingSharePercentage
	if dec.V == nil {
		return errors.New("missing required field 'v' for Order")
	}
	o.V = *dec.V
	if dec.R == nil {
		return errors.New("missing required field 'r' for Order")
	}
	o.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for Order")
	}
	o.S = (*big.Int)(dec.S)
	return nil
}
